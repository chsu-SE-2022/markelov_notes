<html>
<head>
   <title>Резюме</title>

</head>
<body background="fon.jpg">
<div align="center"><b><font></font></b></div><font size = "-1">
<div align="center"><b><font>3.6. Резюме</font></b></div><font size = "-1">


<p align=justify>Краткое знакомство с возможностями предложения SELECT показало, что с его помощью можно реализовать все реляционные операции. Кроме того, в предложении SELECT выполняются разнообразные вычисления, агрегирование данных, их упорядочение и ряд других операций, позволяющих описать в одном предложении ту работу, для выполнения которой потребовалось бы написать несколько страниц программы на алгоритмических языках Си, Паскаль или на внутренних языках ряда распространенных СУБД.</P>
<p align=justify>Например, пусть требуется получить калорийность и стоимость тех блюд, для которых:</P>
<UL>
<LI> есть все составляющие их продукты;
<LI> калорийность не превышает 400 ккал;
<LI> стоимость не превышает 1.5 рубля,
а результат надо упорядочить по возрастанию калорийности блюд в рамках их видов.</UL>
<p align=justify>Для этого можно дать запрос, показанный на рис. 3.2, позволяющий получить искомый результат в виде таблицы</P>
<TABLE>
<TR><TH align=left>Вид</th><TH colspan=5 align=left>Блюдо</th></TR>
<TR><TD>Горячее</TD><TD>Помидоры с луком</TD><TD>калорий -</TD><TD>244.6</TD><TD>0.44</TD><TD>руб</TD></TR>
<TR><TD>Горячее</TD><TD>Бефстроганов</TD><TD>калорий -</TD><TD>321.3</TD><TD>0.53</TD><TD>руб</TD></TR>
<TR><TD>Горячее</TD><TD>Драчена</TD><TD>калорий -</TD><TD>333.9</TD><TD>0.33</TD><TD>руб</TD></TR>
<TR><TD>Горячее</TD><TD>Каша рисовая</TD><TD>калорий -</TD><TD>339.2</TD><TD>0.27</TD><TD>руб</TD></TR>
<TR><TD>Горячее</TD><TD>Омлет с луком</TD><TD>калорий -</TD><TD>354.9</TD><TD>0.36</TD><TD>руб</TD></TR>
<TR><TD>Десерт</TD><TD>Яблоки печеные</TD><TD>калорий -</TD><TD>170.2</TD><TD>0.30</TD><TD>руб</TD></TR>
<TR><TD>Десерт</TD><TD>Крем творожный</TD><TD>калорий -</TD><TD>394.3</TD><TD>0.27</TD><TD>руб</TD></TR>
<TR><TD>Закуска</TD><TD>Салат летний</TD><TD>калорий -</TD><TD>155.5</TD><TD>0.32</TD><TD>руб</TD></TR>
<TR><TD>Закуска</TD><TD>Салат витаминный</TD><TD>калорий -</TD><TD>217.4</TD><TD>0.37</TD><TD>руб</TD></TR>
<TR><TD>Закуска</TD><TD>Творог</TD><TD>калорий -</TD><TD>330.0</TD><TD>0.22</TD><TD>руб</TD></TR>
<TR><TD>Закуска</TD><TD>Мясо с гарниром</TD><TD>калорий -</TD><TD>378.7</TD><TD>0.62</TD><TD>руб</TD></TR>
<TR><TD>Напиток</TD><TD>Кофе черный</TD><TD>калорий -</TD><TD>7.1</TD><TD>0.05</TD><TD>руб</TD></TR>
<TR><TD>Напиток</TD><TD>Компот</TD><TD>калорий -</TD><TD>74.4</TD><TD>0.14</TD><TD>руб</TD></TR>
<TR><TD>Напиток</TD><TD>Кофе на молоке</TD><TD>калорий -</TD><TD>154.8</TD><TD>0.11</TD><TD>руб</TD></TR>
<TR><TD>Напиток</TD><TD>Молочный напиток</TD><TD>калорий -</TD><TD>264.9</TD><TD>0.34</TD><TD>руб</TD></TR>
<TR><TD>Суп</TD><TD>Суп молочный</TD><TD>калорий -</TD><TD>396.6</TD><TD>0.22</TD><TD>руб</TD></TR>
</TABLE>

<PRE>
SELECT	Вид, Блюдо, 'калорий -',
	(SUM(INT((Белки+Углев)*4.1+Жиры*9.3)*Вес/1000)),
	(SUM(Стоимость/К_во*Вес/1000)+MIN(Труд/100)),’руб’
FROM	Блюда, Вид_блюд, Состав, Продукты, Наличие
WHERE	Блюда.БЛ  = Состав.БЛ
AND	Состав.ПР = Продукты.ПР
AND	Состав.ПР = Наличие.ПР
AND	Блюда.В	= Вид_блюд.В
AND	БЛ NOT IN
	(	SELECT	БЛ
		FROM	Состав
		WHERE 	ПР IN
			(	SELECT	ПР
				FROM	Наличие
				WHERE	К_во = 0))
GROUP	BY Вид, Блюдо
HAVING	SUM(Стоимость/К_во*Вес/1000+MIN(Труд/100))&lt; 1.5
	AND	SUM(((Белки+Углев)*4.1+Жиры*9.3)*Вес/1000) &lt; 400
ORDER	BY Вид, 4;
</PRE>

<p align=center><I>Рис. 3.2. Пример сложного запроса</I></P>
<p align=justify>Такой результат, нестрого говоря, строился следующим образом.</P>
<OL>
<LI> FROM. Эта фраза инициирует создание в рабочей памяти таблицы, являющейся декартовым произведением таблиц Блюда, Вид_блюд, Состав, Продукты и Наличие.
<LI> WHERE. Эта фраза нужна для преобразования полученного декартова произведения в естественное соединение и удаления из последнего строк с кодами блюд, не обеспеченных продуктами. Естественное соединение образуется путем вычеркивания строк, где не совпадают: код блюда из таблицы Блюда с кодом блюда из таблицы Состав, код продукта из таблицы Состав с кодом продукта из таблицы Продукты и т.д. Обеспеченность блюда всеми продуктами проверяется с помощью последовательности подзапросов. Внутренний подзапрос выдает перечень кодов продуктов, которых нет в кладовой пансионата. Следующий подзапрос выдает коды тех блюд, в состав которых должны входить "отсутствующие" продукты. И, наконец, из естественного соединения вычеркиваются строки с кодами полученных блюд (точнее оставляются строки "Где код блюда не принадлежит перечню кодов блюд, полученному в подзапросе".
<LI> SELECT. Из полученного соединения удаляются столбцы, не используемые в выражениях SELECT или других фразах. Если в списке SELECT есть выражения (константы), то для хранения их значений формируются дополнительные столбцы и инициируются операции по их заполнению. В рассматриваемом примере будут сохранены столбцы Вид, Блюдо, Белки, Углев, Жиры, Вес, Стоимость, К_во и созданы дополнительные столбцы для формирования и хранения значений стоимости и калорийности составляющих каждого блюда, а также для хранения текстовых констант 'калорий -' и 'руб'. Обратите внимание на прием, использованный при суммировании стоимостей продуктов, входящих в состав блюда, и стоимости его приготовления (Труд): можно ли заменить MIN на MAX или AVG?
<LI> GROUP BY. Отредактированное естественное соединение группируется по видам блюд и их названиям. Создаются группы горячих блюд, десертов и т.д., а внутри каждой группы создаются подгруппы строк со сведениями о продуктах, относящихся к конкретному блюду группы.
<LI> SELECT. Каждая подгруппа строк, полученная на предыдущем шаге, преобразуется в единственную строку для результата. В нее заносится вид блюда (общий для всех подгрупп группы), название блюда (общее для всех строк подгруппы), две текстовых константы ('калорий -' и 'руб') и две суммы. Последние формируются путем суммирования тех значений дополнительных столбцов, которые принадлежат подгруппе.
<LI> HAVING. Сформированные строки, не удовлетворяющие условиям фразы HAVING

<PRE>
SUM(Стоимость/К_во*Вес/1000+MIN(Труд/100)) &lt; 1.5 и
SUM(((Белки+Углев)*4.1+Жиры*9.3)*Вес/1000) &lt; 400</PRE>

исключаются из результата предыдущего шага.
<LI> ORDER BY. Результат шага 6 упорядочивается в соответствии со списком фразы ORDER BY для получения окончательного результата. Сначала строки группируются по видам блюд (в алфавитном порядке), а затем – по значению элемента данных, указанного на четвертом месте фразы SELECT, т.е. по калорийности.</OL>
<p align=justify>Конечно, рассмотренный запрос весьма сложен, но попробуйте написать на любом знакомом вам языке программу, реализующую те же действия, и оцените сложность ее написания и отладки.					</P>
	
<p align="center">
<a href="3-5.htm">3.5</a> | <a href="index.htm">Содержание</a> | <a href="4-1.htm">4.1</a>
</p>

</body>
</html>
