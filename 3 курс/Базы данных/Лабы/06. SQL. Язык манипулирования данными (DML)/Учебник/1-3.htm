<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)1-3.htm -->
<HTML><HEAD><TITLE>Таблицы SQL</TITLE>
</HEAD>
<body background="fon.jpg">
<div align="center"><b><font>1.3. Таблицы SQL</font></b></div><font size = "-1">

<P align=justify>До сих пор понятие "таблица", как правило, связывалось с 
реальной или базовой таблицей, т.е. c таблицей, для каждой строки которой в 
действительности имеется некоторый двойник, хранящийся в физической памяти 
машины (рис.1.2). Однако SQL использует и создает ряд виртуальных (как будто 
существующих) таблиц: представлений, курсоров и неименованных рабочих таблиц, в 
которых формируются результаты запросов на получение данных из базовых таблиц и, 
возможно, представлений. Это таблицы, которые не существуют в базе данных, но 
как бы существуют с точки зрения пользователя.</P>
<P align=justify>Базовые таблицы создаются с помощью предложения CREATE TABLE 
(создать таблицу), подробное описание которого приведено в главе 5. Здесь же 
приведем пример предложения для создания описания таблицы Блюда:</P>
<P align=center><IMG src="1-3.files/sql.gif"></P>
<P align=center><I>Рис. 1.2. База данных в восприятии пользователя </I></P><PRE>CREATE TABLE Блюда
	(БЛ	SMALLINT,
	Блюдо	CHAR (70),
	В		CHAR (1),
	Основа	CHAR (10),
	Выход	FLOAT,
	Труд	SMALLINT);
</PRE>
<P align=justify>Предложение CREAT TABLE специфицирует имя базовой таблицы, 
которая должна быть создана, имена ее столбцов и типы данных для этих столбцов 
(а также, возможно, некоторую дополнительную информацию, не иллюстрируемую 
данным примером). CREAT TABLE - выполняемое предложение. Если его ввести с 
терминала, система тотчас построит таблицу Блюда, которая сначала будет пустой: 
она будет содержать только строку заголовков столбцов, но не будет еще содержать 
никаких строк с данными. Однако можно немедленно приступить к вставке таких 
строк данных, возможно, с помощью предложения INSERT и создать таблицу, 
аналогичную таблице Блюда <A 
href="1-1.htm#r1">рис.1.1</A>.</P>
<P align=justify>Если теперь потребовалось узнать какие овощные блюда может 
приготовить повар пансионата, то можно набрать на терминале следующий текст 
запроса:</P><PRE>SELECT	БЛ,Блюдо
FROM 	Блюда
WHERE	Основа = 'Овощи';</PRE>и мгновенно получить на экране следующий результат 
его реализации: 
<P align=justify>
<TABLE>
  <TBODY>
  <TR>
    <TH>БЛ</TH>
    <TH>Блюдо</TH></TR>
  <TR>
    <TD>1</TD>
    <TD>Салат летний</TD></TR>
  <TR>
    <TD>3</TD>
    <TD>Салат витаминный</TD></TR>
  <TR>
    <TD>17</TD>
    <TD>Морковь с рисом</TD></TR>
  <TR>
    <TD>23</TD>
    <TD>Помидоры с луком</TD></TR></TBODY></TABLE></P>
<P align=justify>Для выполнения этого предложения SELECT (выбрать), подробное 
описание которого будет дано в главах 2 и 3, СУБД должна сначала сформировать 
пустую рабочую таблицу, состоящую из столбцов БЛ и Блюдо, тип данных которых 
должен совпадать с типом данных аналогичных столбцов базовой таблицы Блюда. 
Затем она должна выбрать из таблицы Блюда все строки, у которых в столбце Основа 
хранится слово Овощи, выделить из этих строк столбцы БЛ и Блюдо и загрузить 
укороченные строки в рабочую таблицу. Наконец, СУБД должна выполнить процедуры 
по организации вывода содержимого рабочей таблицы на экран терминала (при этом 
если в рабочей таблице содержится более 20-24 строк, она должна использовать 
процедуры постраничного вывода и т.п.). После выполнения запроса СУБД должна 
уничтожить рабочую таблицу.</P>
<P align=justify>Если, например, надо получить значение калорийности всех 
овощей, включенных в таблицу Продукты, то можно набрать на терминале запрос</P>
<PRE>
SELECT	Продукт, Белки, Жиры, Углев,
	((Белки+Углев)*4.1+Жиры*9.3)
FROM 	Продукты
WHERE	Продукт IN ('Морковь','Лук','Помидоры','Зелень');</PRE>и получить на 
экране следующий результат его реализации: 
<font size="-1"><TABLE>
  <TBODY>
  <TR>
    <TH>Продукт</TH>
    <TH>Белки</TH>
    <TH>Жиры</TH>
    <TH>Углев</TH>
    <TH>((Белки+Углев)*4.1+Жиры*9.3)</TH></TR>
  <TR>
    <TD>Морковь</TD>
    <TD>13.</TD>
    <TD>1.</TD>
    <TD>70.</TD>
    <TD>349.6</TD></TR>
  <TR>
    <TD>Лук</TD>
    <TD>17.</TD>
    <TD>0.</TD>
    <TD>95.</TD>
    <TD>459.2</TD></TR>
  <TR>
    <TD>Помидоры</TD>
    <TD>6.</TD>
    <TD>0.</TD>
    <TD>42.</TD>
    <TD>196.8</TD></TR>
  <TR>
    <TD>Зелень</TD>
    <TD>9.</TD>
    <TD>0.</TD>
    <TD>20.</TD>
    <TD>118.9</TD></TR></TBODY></TABLE></font>
<P align=justify>В последнем столбце этой рабочей таблицы приведены данные о 
калорийности продуктов, отсутствующие в явном виде в базовой таблице Продукты. 
Эти данные вычислены по хранимым значениям основных питательных веществ 
продуктов, помещены в рабочую таблицу и будут существовать до момента смены 
изображения на экране. Однако если необходимо сохранить эти данные в какой-либо 
базовой таблице, то существует предложение (INSERT), позволяющее переписать 
содержимое рабочей таблицы в указанные столбцы базовой таблицы (реляционная 
операция присваивания).</P>
<P align=justify>Часто пользователя не устраивает как способ описания нужного 
набора выводимых строк, так и результат выполнения запроса, сформированного из 
данных одной таблицы. Ему хотелось бы уточнить выводимые (запрашиваемые) данные 
сведениями из других таблиц.</P>
<P align=justify>Например, в запросе на получение состава овощных блюд</P><PRE>SELECT 	БЛ,ПР,Вес
FROM 	Состав
WHERE 	БЛ IN (1,3,17,23);</PRE>
<P align=justify>пришлось перечислять номера этих блюд, так как в таблице Состав 
нет данных об основных продуктах блюда (они есть в таблице Блюда). Полученный 
состав овощных блюд (рис.1.3,а) оказался "слепым": в нем и блюда и продукты 
представлены номерами, а не именами. Удобнее и нагляднее (рис.1.3,б) </P>
<CENTER>
<TABLE border=1 width="80%">
  <TBODY>
  <TR>
    <TD>а)</TD>
    <TD>б)</TD></TR>
  <TR>
    <TD>
      <TABLE>
        <TBODY>
        <TR>
          <TH>БЛ</TH>
          <TH>ПР</TH>
          <TH>Вес</TH>
          <TH>Блюдо</TH></TR>
        <TR>
          <TD>1</TD>
          <TD>11</TD>
          <TD>100</TD>
          <TD>Салат летний</TD></TR>
        <TR>
          <TD>1</TD>
          <TD>15</TD>
          <TD>80</TD>
          <TD>Салат летний</TD></TR>
        <TR>
          <TD>1</TD>
          <TD>12</TD>
          <TD>5</TD>
          <TD>Салат летний</TD></TR>
        <TR>
          <TD>1</TD>
          <TD>4</TD>
          <TD>15</TD>
          <TD>Салат летний</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>11</TD>
          <TD>55</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>15</TD>
          <TD>55</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>6</TD>
          <TD>50</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>12</TD>
          <TD>20</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>10</TD>
          <TD>15</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>3</TD>
          <TD>16</TD>
          <TD>5</TD>
          <TD>Салат витаминный</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>9</TD>
          <TD>150</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>7</TD>
          <TD>50</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>13</TD>
          <TD>25</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>3</TD>
          <TD>20</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>12</TD>
          <TD>10</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>17</TD>
          <TD>14</TD>
          <TD>5</TD>
          <TD>Морковь с рисом</TD></TR>
        <TR>
          <TD>23</TD>
          <TD>11</TD>
          <TD>250</TD>
          <TD>Помидоры с луком</TD></TR>
        <TR>
          <TD>23</TD>
          <TD>10</TD>
          <TD>65</TD>
          <TD>Помидоры с луком</TD></TR>
        <TR>
          <TD>23</TD>
          <TD>3</TD>
          <TD>20</TD>
          <TD>Помидоры с луком</TD></TR></TBODY></TABLE></TD>
    <TD>
      <TABLE>
        <TBODY>
        <TR>
          <TH>Продукт</TH>
          <TH>Вес</TH></TR>
        <TR>
          <TD>Помидоры</TD>
          <TD>100</TD></TR>
        <TR>
          <TD>Яблоки</TD>
          <TD>80</TD></TR>
        <TR>
          <TD>Зелень</TD>
          <TD>5</TD></TR>
        <TR>
          <TD>Майонез</TD>
          <TD>15</TD></TR>
        <TR>
          <TD>Помидоры</TD>
          <TD>55</TD></TR>
        <TR>
          <TD>Яблоки</TD>
          <TD>55</TD></TR>
        <TR>
          <TD>Сметана</TD>
          <TD>50</TD></TR>
        <TR>
          <TD>Зелень</TD>
          <TD>20</TD></TR>
        <TR>
          <TD>Лук</TD>
          <TD>15</TD></TR>
        <TR>
          <TD>Сахар</TD>
          <TD>5</TD></TR>
        <TR>
          <TD>Морковь</TD>
          <TD>150</TD></TR>
        <TR>
          <TD>Молоко</TD>
          <TD>50</TD></TR>
        <TR>
          <TD>Рис</TD>
          <TD>25</TD></TR>
        <TR>
          <TD>Масло</TD>
          <TD>20</TD></TR>
        <TR>
          <TD>Зелень</TD>
          <TD>10</TD></TR>
        <TR>
          <TD>Мука</TD>
          <TD>5</TD></TR>
        <TR>
          <TD>Помидоры</TD>
          <TD>250</TD></TR>
        <TR>
          <TD>Лук</TD>
          <TD>65</TD></TR>
        <TR>
          <TD>Масло</TD>
          <TD>20</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></CENTER>
<P align=justify><I>Рис. 1.3. Состав овощных блюд базы данных 
ПАНСИОН</I></P>запрос сформированный по трем таблицам: <PRE>SELECT	Блюдо, Продукт, Вес
FROM	Состав,Б люда, Продукты
WHERE	Состав.БЛ = Блюда.БЛ
AND	Состав.ПР = Продукты.ПР
AND	Основа = 'Овощи';</PRE>
<P align=justify>В нем для получения рабочей таблицы выполняется естественное 
соединение [<A 
href="liter.htm">2</A>] таблиц 
Блюда, Продукты и Состав (условие соединения - равенство значений номеров блюд и 
значений номеров продуктов). Затем выделяются строки, у которых в столбце Основа 
хранится слово Овощи, и из этих строк - столбцы Блюдо, Продукт и Вес.</P>
<P align=justify>Если пользователи достаточно часто интересуются составом 
различных блюд, то для упрощения формирования запросов целесообразно создать 
представление.</P>
<P align=justify>Представление - это пустая именованная таблица, определяемая 
перечнем тех столбцов таблиц и признаками тех их строк, которые хотелось бы в 
ней увидеть. Представление является как бы "окном" в одну или несколько базовых 
таблиц. Оно создается с помощью предложения CREATE VIEW (создать представление), 
подробное описание которого приведено в главе 5. Здесь же приведем пример 
предложения для создания представления Состав_блюд:</P><PRE>CREATE VIEW 	Состав_блюд
AS SELECT 	Блюдо, Продукт, Вес
FROM 	Состав,Блюда,Продукты
WHERE 	Состав.БЛ = Блюда.БЛ
AND 	Состав.ПР = Продукты.ПР;</PRE>
<P align=justify>Оно описывает пустую таблицу, в которую при реализации запроса 
будут загружаться данные из столбцов Блюдо, Продукт и Вес таблиц Блюда, Продукты 
и Состав, соответственно. Теперь для получения состава овощных блюд можно дать 
запрос</P><PRE>SELECT 	Блюдо,Продукт,Вес
FROM 	Состав_блюд
WHERE 	Основа = 'Овощи';</PRE>
<P align=justify>и получить на экране терминала данные, которые представлены на 
рис. 1.3,б. А для получения состава супа Харчо можно дать запрос</P><PRE>SELECT	Блюдо, Продукт, Вес
FROM 	Состав_блюд
WHERE	Блюдо = 'Суп харчо';</PRE>
<P align=justify>О целесообразности создания представлений будет рассказано 
ниже, а здесь лишь отметим, что они позволяют повысить уровень логической 
независимости данных, упростить их восприятие и "скрыть" от некоторых 
пользователей те или иные данные, например, данные о новых ценах на продукты 
первой необходимости или из какой рыбы приготавливается "Судак по-польски".</P>
<P align=justify>Наконец, еще об одних виртуальных таблицах - курсорах. Курсор - 
это пустая именованная таблица, определяемая перечнем тех столбцов базовых 
таблиц и признаками тех их строк, которые хотелось бы в ней увидеть. В чем же 
различие между курсором и представлением?</P>
<P align=justify>Для пользователя представления почти не отличаются от базовых 
таблиц (есть лишь некоторые ограничения при выполнении различных операций 
манипулирования данными). Они могут использоваться как в интерактивном режиме, 
так и в прикладных программах. Курсоры же созданы для процедурной работы с 
таблицей в прикладных программах. Например, после объявления курсора</P><PRE>DECLARE	Блюд_состав CURSOR FOR
SELECT	Блюдо,Продукт,Вес
FROM	Состав,Блюда,Продукты
WHERE	Состав.БЛ = Блюда.БЛ
AND	Состав.ПР = Продукты.ПР
AND	Блюдо = 'Суп харчо';</PRE>
<P align=justify>и его активизации (OPEN Блюд_состав) будет создана временная 
таблица с составом блюда "Суп харчо" и специальным указателем, определяющим в 
качестве текущей первую строку этой таблицы. С помощью предложения FETCH 
(выбрать), которое обычно исполняется в программном цикле, можно присвоить 
определенным переменным значения указанных столбцов этой строки. Одновременно 
курсор будет передвинут к следующей строке таблицы. После обработки в программе 
полученных значений переменных выполняется следующее предложение FETCH и т.д. до 
окончания перебора всех продуктов Харчо.</P>
<P align=center><A 
href="1-2.htm">1.2</A> | <A 
href="index.htm">Содержание</A> | 
<A href="2-1.htm">2.1</A> </P>

</BODY></HTML>
